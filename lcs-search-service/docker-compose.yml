version: '3.6'
services:
  data-feed:
    image: "data-feed"
    build:
      context: 'data-feed'
    depends_on:
    - "backend"
    volumes:
      - ./data-feed:/app
    environment:
      NODE_ENV: development
      GRAPHQL_ENDPOINT: http://backend:8080/v1/graphql
      SOURCE_API_URL:
  frontend:
    image: "frontend"
    build:
      context: 'frontend'
      target: runner
    volumes:
      - ./frontend:/app
    command: npm run dev
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: development
  backend:
    image: "backend"
    build:
      context: 'backend'
    ports:
    - "0.0.0.0:8080:8080"
    depends_on:
    - "postgres"
    restart: always
    environment:
      ## Postgres database to store Hasura metadata
      HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://postgres:postgrespassword@postgres:5432/postgres
      ## This env var can be used to add the above postgres database to Hasura as a data source. this can be removed/updated based on your needs
      PG_DATABASE_URL: postgres://postgres:postgrespassword@postgres:5432/postgres
      ## Enable the console served by server
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true" # set to "false" to disable console
      ## Enable debugging mode. It is recommended to disable this in production
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      ## Uncomment next line to run console offline (i.e load console assets from server instead of CDN)
      # HASURA_GRAPHQL_CONSOLE_ASSETS_DIR: /srv/console-assets
      ## Uncomment next line to set an admin secret
      # HASURA_GRAPHQL_ADMIN_SECRET: myadminsecretkey
  postgres:
    image: postgres:14
    restart: always
    volumes:
      - db_data_lcs:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: postgrespassword
volumes:
  db_data_lcs:
